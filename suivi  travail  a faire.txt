F√©licitations ! Apr√®s avoir vaincu la s√©rie d'erreurs d'importation circulaire, votre application Flask-PostGIS d√©marre parfaitement ! üéâ

Le message API D√©marr√©e. Interface Admin disponible √† : http://127.0.0.1:5000/admin confirme que l'architecture est solide.

Maintenant que le squelette technique est pr√™t, passons √† l'√©laboration d'une application optimale avec un tableau de bord (dashboard) √©l√©gant, int√©grant la gestion clinique, les statistiques et la cartographie.

I. Architecture Fonctionnelle Cible
Pour passer de l'API REST √† une application compl√®te orient√©e utilisateur, nous allons structurer les fonctionnalit√©s autour de trois piliers principaux, en utilisant des outils adapt√©s.

Pilier Fonctionnel	Outil Actuel	Mise en ≈ìuvre Sugg√©r√©e
Gestion des donn√©es (CRUD)	Flask-Admin	Maintenu (pour les administrateurs)
Dashboard & Vues Utilisateur	(Nouveau)	Flask + Jinja2 (pour les pages HTML)
Cartographie & Visualisation	(API PostGIS)	Leaflet/Mapbox GL JS (c√¥t√© client)
Statistiques	(API REST)	Chart.js / D3.js (c√¥t√© client)

Exporter vers Sheets
II. D√©ploiement du Dashboard (Vues Utilisateur)
L'approche la plus simple et la plus int√©gr√©e est d'ajouter de nouvelles vues (routes Flask classiques) qui utilisent des templates Jinja2 pour l'affichage.

1. Structure de Vues
Nous allons cr√©er un fichier pour les vues du dashboard (par exemple, dashboard_views.py) et l'importer dans app.py.

Cr√©ation du fichier dashboard_views.py
Ce fichier contiendra la logique d'affichage des pages (sans √™tre des endpoints RESTful).

Python

# dashboard_views.py

from flask import Blueprint, render_template
from extensions import db
from models.centre_sante import CentreSante
# ... (Importer d'autres mod√®les/ressources si n√©cessaire)

# Cr√©ation d'un Blueprint pour organiser les routes web
bp = Blueprint('dashboard', __name__, url_prefix='/dashboard')

@bp.route('/')
def index():
    # Exemple de r√©cup√©ration de donn√©es simples pour le dashboard
    total_centres = db.session.query(CentreSante).count()
    return render_template('dashboard/index.html', total_centres=total_centres)

@bp.route('/carte')
def carte_view():
    return render_template('dashboard/carte.html')



Ajout au fichier app.py
Vous devez enregistrer le nouveau Blueprint dans la fonction create_app() de app.py :

Python

# app.py (dans la fonction create_app)

    # Importation du nouveau Blueprint
    from dashboard_views import bp as dashboard_bp 
    
    # Enregistrement du Blueprint
    app.register_blueprint(dashboard_bp)
    
    return app
III. Conception √âpur√©e (Templates Jinja2 & Formulaires)
Un design √©pur√© est crucial pour l'adoption. Nous utiliserons Bootstrap pour la structure et Jinja2 pour les templates.

1. Mise en place de Bootstrap
Cr√©ez le dossier templates/dashboard et un template de base (base.html).

HTML

<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Sant√© Dakar Dashboard{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <style>
        /* Style √©pur√©: barre lat√©rale minimaliste */
        #sidebar { background-color: #343a40; min-height: 100vh; }
        .nav-link { color: #f8f9fa; }
        .nav-link:hover { color: #ffffff; background-color: #495057; }
    </style>
</head>
<body>
    <div class="d-flex">
        <div id="sidebar" class="text-white p-3">
            <h4 class="mb-4">Sant√© Dakar</h4>
            <ul class="nav flex-column">
                <li class="nav-item"><a class="nav-link active" href="{{ url_for('dashboard.index') }}">Dashboard</a></li>
                <li class="nav-item"><a class="nav-link" href="{{ url_for('dashboard.carte_view') }}">Cartographie</a></li>
                <li class="nav-item"><a class="nav-link" href="{{ url_for('admin.index') }}">Admin CRUD</a></li>
            </ul>
        </div>
        <div id="content" class="p-4 flex-grow-1">
            {% block content %}{% endblock %}
        </div>
    </div>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    {% block scripts %}{% endblock %}
</body>
</html>
2. Impl√©mentation de Formulaires Cliniques (Flask-WTF)
Pour une application optimale, la gestion clinique n√©cessite des formulaires s√©curis√©s. L'int√©gration de Flask-WTF est la solution standard.

Installation :
Bash

(venv) C:\sante_dakar_api> pip install flask-wtf
Exemple de Formulaire (forms.py) :
Python

# forms.py

from flask_wtf import FlaskForm
from wtforms import StringField, TextAreaField, IntegerField, SelectField, SubmitField
from wtforms.validators import DataRequired, NumberRange

class ConsultationForm(FlaskForm):
    patient_id = IntegerField('ID Patient', validators=[DataRequired(), NumberRange(min=1)])
    medecin_id = IntegerField('ID M√©decin', validators=[DataRequired(), NumberRange(min=1)])
    diagnostic = TextAreaField('Diagnostic', validators=[DataRequired()])
    resultat_examen = TextAreaField('R√©sultats Examens')
    submit = SubmitField('Enregistrer la Consultation')
IV. Fonctionnalit√©s Statistiques et Cartographiques Cl√©s
Ces fonctionnalit√©s s'appuient sur vos endpoints RESTful (/api/stats/proximity, /api/centres/geojson, etc.) et sont ex√©cut√©es c√¥t√© client (navigateur) pour ne pas surcharger le serveur Flask.

1. Cartographie Avanc√©e (Leaflet)
Le fichier templates/dashboard/carte.html sera l'h√¥te de votre carte. Il doit r√©cup√©rer vos donn√©es PostGIS via l'API et les afficher.

Code JS pour carte.html :

JavaScript

// Fonctionnalit√© : Afficher les centres de sant√© (via l'endpoint GeoJSON)
var map = L.map('map').setView([14.7167, -17.4677], 12); // Coordonn√©es de Dakar
L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png').addTo(map);

fetch('/api/centres/geojson') // R√©cup√®re les donn√©es GeoJSON de votre API
    .then(response => response.json())
    .then(data => {
        L.geoJSON(data, {
            onEachFeature: function (feature, layer) {
                // Cr√©er un popup informatif
                layer.bindPopup("<b>Centre:</b> " + feature.properties.nom);
            }
        }).addTo(map);
    });

// TODO: Ajouter un formulaire de recherche de proximit√© ici, qui appelle /api/stats/proximity
2. Statistiques (Chart.js)
Vous utiliserez l'API /api/stats/departements pour alimenter un graphique montrant la distribution des centres par d√©partement.

Code JS pour dashboard/index.html :

HTML

{% extends "dashboard/base.html" %}

{% block content %}
    <h1>Aper√ßu G√©n√©ral</h1>
    <div class="row">
        <div class="col-md-4">
            <div class="card text-white bg-primary mb-3">
                <div class="card-body">
                    <h5 class="card-title">Centres Totaux</h5>
                    <p class="card-text fs-1">{{ total_centres }}</p>
                </div>
            </div>
        </div>
        </div>
    <div class="row mt-4">
        <div class="col-md-6">
            <canvas id="centresParDepartement"></canvas>
        </div>
    </div>
{% endblock %}

{% block scripts %}
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.3/dist/chart.umd.min.js"></script>
<script>
    fetch('/api/stats/departements')
        .then(response => response.json())
        .then(data => {
            const labels = data.data.map(item => item.departement);
            const counts = data.data.map(item => item.nombre_centres);

            new Chart(document.getElementById('centresParDepartement'), {
                type: 'bar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Centres par D√©partement',
                        data: counts,
                        backgroundColor: 'rgba(75, 192, 192, 0.6)'
                    }]
                },
                options: { responsive: true, scales: { y: { beginAtZero: true } } }
            });
        });
</script>
{% endblock %}
R√©sum√©
Votre prochaine √©tape consiste √† :

Installer Flask-WTF (pip install flask-wtf).

Cr√©er le fichier extensions.py si ce n'est pas d√©j√† fait.

Cr√©er le fichier dashboard_views.py et le Blueprint.

Cr√©er les dossiers templates/dashboard et les fichiers base.html, index.html, carte.html.

Ajouter la logique pour afficher les cartes et graphiques en utilisant vos endpoints API existants.




 
